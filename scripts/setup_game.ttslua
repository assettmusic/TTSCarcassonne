--contains scripts and data related to setting up the game

--the following location is used when the base tile stack is disabled
defaultTileStackPosition = {x=6.36, y=1.36, z=23.85}
--[<setting name>] = {[<expansion bag>] = {[<item name>] = {}}}
tileSettings = {
    ['InCTiles'] = {['InC'] = {['InCTiles'] = {}}},
    ['TnBTiles'] = {['TnB'] = {['TnBTiles'] = {}}},
    ['PnDTiles'] = {['PnD'] = {['PnDTiles'] = {}}},
    ['TowerTiles'] = {['Tower'] = {['TowerTiles'] = {}}},
    ['AnMTiles'] = {['AnM'] = {['AnMTiles'] = {}}},
    ['KnRBTiles'] = {['KnRB'] = {['KnRBTiles'] = {}}},
    ['CultTiles'] = {['Cult'] = {
        ['CultTiles'] = {},
        ['CultBonusTile'] = {}
    }},
	['CatapultTiles'] = {['Catapult'] = {['CatapultTiles'] = {}}},
	['BCnBTiles'] = {['BCnB'] = {['BCnBTiles'] = {}}},
    ['HnSTiles'] = {['HnS'] = {['HnSTiles'] = {}}},
    ['WoFTiles'] = {['WoF'] = {['WoFTiles'] = {}}},
    ['WoFWheelTiles'] = {['WoF'] = {['WoFWheelTiles'] = {}}},
    ['FerriesTiles'] = {['Ferries'] = {['FerriesTiles'] = {}}},
    ['FlierTiles'] = {['Flier'] = {['FlierTiles'] = {}}},
    ['MnWTiles'] = {['MnW'] = {['MnWTiles'] = {}}},
    ['RobbersTiles'] = {['Robbers'] = {['RobbersTiles'] = {}}},
    ['GamesQuarterlyTiles'] = {['GamesQuarterly'] = {['GamesQuarterlyTiles'] = {}}},
    ['GoldminesTiles'] = {['Goldmines'] = {['GoldminesTiles'] = {}}},
    ['SpielPromoTiles'] = {['SpielPromo'] = {['SpielPromoTiles'] = {}}},
    ['RussianPromoTiles'] = {['RussianPromo'] = {['RussianPromoTiles'] = {}}}
}

--the following location is used for the MixAllTiles house rule
defaultRiverLocation = {position = {x=0.0, y=2.32, z=17.49}, rotation = {x=0,y=180,z=180}}

--the pig should start at this position relative to the center of the wheel
wheelPigStartingOffset = {x=0.0, z=1.645}

--[<setting name>] = {[<expansion bag>] = {[<item name>] = {position={<position on table>}, rotation={<rotation>}, shuffle=<should shuffle>, lock=<should lock>}}}
--will only use the first ForkTile, SpringTile, and LakeTile, prioritizing GamesQuarterly over RiverII over BB5 River over the original River (CAR ref 237)
--this is super hacky, especially since the order that pairs iterates is technically undefined, though we're relying on them coming in this order
startingTileSettings = {
    ['StartingTileRiverII'] = {['RiverII'] = {
        ['RiverBodyTiles'] = {position = {x=3.18, y=2.32, z=14.31}, rotation = {x=0,y=180,z=180}, shuffle = true, lock = false},
        ['RiverForkTile'] = {position = {x=-3.18, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false},
        ['RiverSpringTile'] = {position = {x=-1.59, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false, priority = 1},
        ['RiverLakeTile'] = {position = {x=0.0, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false, priority = 1}
    }},
    ['StartingTileRiverBB5'] = {['RiverBB5'] = {
        ['RiverBodyTiles'] = {position = {x=3.18, y=3.32, z=14.31}, rotation = {x=0,y=180,z=180}, shuffle = true, lock = false},
        ['RiverSpringTile'] = {position = {x=-1.59, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false, priority = 2},
        ['RiverLakeTile'] = {position = {x=0.0, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false, priority = 2}
    }},
    ['StartingTileRiver'] = {['River'] = {
        ['RiverBodyTiles'] = {position = {x=3.18, y=4.32, z=14.31}, rotation = {x=0,y=180,z=180}, shuffle = true, lock = false},
        ['RiverSpringTile'] = {position = {x=-1.59, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false, priority = 3},
        ['RiverLakeTile'] = {position = {x=0.0, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false, priority = 3}
    }},
    ['GamesQuarterlyTiles'] = {['GamesQuarterly'] = {
        ['RiverBodyTiles'] = {position = {x=3.18, y=5.32, z=14.31}, rotation = {x=0,y=180,z=180}, shuffle = true, lock = false},
        ['RiverSpringTile'] = {position = {x=-1.59, y=2.32, z=14.31}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = false, priority = 0}
    }},
    ['StartingTileCoC'] = {['CoC'] = {
        ['CoCStartingTiles'] = {position = {x=0.0, y=2.32, z=11.13}, rotation = {x=0,y=180,z=180}, shuffle = false, lock = false, contents = {
            [1] = {position = {x=-3.18, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [2] = {position = {x=-1.59, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [3] = {position = {x=0.0, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [4] = {position = {x=1.59, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [5] = {position = {x=-3.18, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [6] = {position = {x=-1.59, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [7] = {position = {x=0.0, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [8] = {position = {x=1.59, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [9] = {position = {x=-3.18, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [10] = {position = {x=-1.59, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [11] = {position = {x=0.0, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [12] = {position = {x=1.59, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true}
        }},
        ['CoCCount'] = {position = {x=-0.30, y=2.0, z=1.44}, rotation = {x=0,y=0,z=0}, shuffle = false, lock = true}
    }},
    ['StartingTileWoF'] = {['WoF'] = {
        -- ['WoFWheel'] = {position = {x=-0.795, y=2.0, z=-0.795}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true},
        ['WoFStartingTiles'] = {position = {x=0.0, y=2.32, z=11.13}, rotation = {x=0,y=180,z=180}, shuffle = false, lock = false, contents = {
            [1] = {position = {x=-3.18, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [2] = {position = {x=-1.59, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [3] = {position = {x=0.0, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [4] = {position = {x=1.59, y=2.0, z=1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [5] = {position = {x=-3.18, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [6] = {position = {x=-1.59, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [7] = {position = {x=0.0, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [8] = {position = {x=1.59, y=2.0, z=0.0}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [9] = {position = {x=-3.18, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [10] = {position = {x=-1.59, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [11] = {position = {x=0.0, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [12] = {position = {x=1.59, y=2.0, z=-1.59}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [13] = {position = {x=-3.18, y=2.0, z=-3.18}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [14] = {position = {x=-1.59, y=2.0, z=-3.18}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [15] = {position = {x=0.0, y=2.0, z=-3.18}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true},
            [16] = {position = {x=1.59, y=2.0, z=-3.18}, rotation = {x=0,y=180,z=0}, shuffle = false, lock = true, addToGrid = true}
        }},
        ['WoFPig'] = {position = {x=-0.795, y=1.33, z=0.85}, rotation = {x=270,y=180,z=0}, shuffle = false, lock = true}
    }}
}

--[<setting name>] = {name = <display name>, mesh = <model file>, diffuse = <diffuse file>, figurepad_offset = {x=<x figurepad_offset>, z=<z figurepad_offset>}, scale = {<model scale>}, use_snap_points=<use snap points>, num=<setting with number to spawn>}
playerFigureSettings = {
    ['BaseFollower'] = {
        name = 'Follower',
        figurepad_offset = {x = 5.15, z = -0.5},
        use_snap_points = true,
        num = 'BaseNumFollowers',
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507572666/4F22246AAEC67B7F142549E71E79DD49F6833D48/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['InCBigFollower'] = {
        name = 'Big Follower',
        figurepad_offset = {x = -0.8, z = 0.5},
        use_snap_points = true,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.6, 0.6, 0.5}},
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507572666/4F22246AAEC67B7F142549E71E79DD49F6833D48/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['TnBBuilder'] = {
        name = 'Builder',
        figurepad_offset = {x = -0.8, z = -0.5},
        use_snap_points = true,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {1.25, 1.25, 1.25}}, --scale should probably be closer to {0.5, 0.42, 0.5}
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/155773601379964516/39142B17D65D9A9EA7175C2DDA61B52BF6FEE730/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['TnBPig'] = {
        name = 'Pig',
        figurepad_offset = {x = -2.25, z = 0.5},
        use_snap_points = true,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.13, 0.13, 0.13}}, --scale should probably be closer to {0.45, 0.5, 0.5}
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1831281470488170911/9A48105993CF34348DCBB138FDCE3DBB421890B8/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['AnMMayor'] = {
        name = 'Mayor',
        figurepad_offset = {x = -2.25, z = -0.5},
        use_snap_points = true,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507627776/96C92F673A89C83AA8BC1F0B4A53A9EF9070A372/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['AnMWagon'] = {
        name = 'Wagon',
        figurepad_offset = {x = -3.7, z = 0.5},
        use_snap_points = true,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507625992/A29365F5E6B7A1BDB032B50FA7058D50889F412A/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['AnMBarn'] = {
        name = 'Barn',
        figurepad_offset = {x = -3.7, z = -0.5},
        use_snap_points = false,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507624234/BABD2A5C96106720D88ACD933A3CA5F5769B5A75/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['HnSShepherd'] = {
        name = 'Shepherd',
        figurepad_offset = {x = -5.15, z = 0.5},
        use_snap_points = true,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507705885/1388796BBEDA6A8D921A04EFFBA3BCDA00C8DC8D/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['Phantoms'] = {
        name = 'Phantom',
        figurepad_offset = {x = -5.15, z = -0.5},
        use_snap_points = true,
        save_figurepad_location = true,
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507676572/D377F41E5C089D244D2FEC7281BEF39A36D351C9/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    --['CIIAbbot'] = {
    --     name = 'Abbot',
    --     figurepad_offset = {x = -5.15, z = -0.5},
    --     use_snap_points = true,
    --     save_figurepad_location = true,
    --     object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
    --     custom_object_params = {type = 1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507715301/5F383426AFEDBC06A18318EB6B9DD9C9E8CC206B/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    -- },
    ['TowerTowers'] = {
        name = 'Tower',
        figurepad_offset = {x = -8.65, z = 0.0},
        use_snap_points = true,
        save_figurepad_location = false,
        num = 'TowerNumTowers',
        color = {r = 120/255, g = 65/255, b = 0/255, a = 255/255},
        object_params = {type = 'Custom_model', scale = {0.39, 0.48, 0.5}},
        custom_object_params = {type=5, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507752144/E20EA352501B8A6DA92F73CFC2D7851EF5294E61/', collider='http://cloud-3.steamusercontent.com/ugc/1014939826507754182/E814C4608C35B5BD9FF79C576AD592AD2D3198DC/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['BCnBBridges'] = {
        name = 'Bridge',
        figurepad_offset = {x = -10.15, z = 0.0},
        use_snap_points = true,
        save_figurepad_location = false,
        num = 'BCnBNumBridges',
        color = {r = 120/255, g = 65/255, b = 0/255, a = 255/255},
        object_params = {type = 'Custom_model', scale = {0.39, 0.48, 0.5}},
        custom_object_params = {type=1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507673310/37EDD668C0EDFAEFAAB4F9E9F825056726CFCD9C/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    }
}

substituteFigureSettings = {}

--[<steam_id>] = {['Intro'] = <intro string>, [<figure name>] = {<custom figure settings>}}
vipFigureSettings = {
    -- ['76561197962338210'] = {
    --     ['Intro'] = "You are being joined by %s, the creator of Scripted Carcassonne.",
    --     ['BaseFollower'] = { type = 'Custom_AssetBundle', assetbundle = 'http://cloud-3.steamusercontent.com/ugc/1014939826507873789/D56CA38C1A69611F7D0A8F474576BE3915BE82E2/', scale = {0.15, 0.15, 0.15} }
    -- },
    -- ['76561197972020303'] = {
    --     ['Intro'] = "You are being joined by %s, contributor to the Carcassonne mod.",
    --    ['BaseFollower'] = { type = 'Custom_AssetBundle', assetbundle = 'http://cloud-3.steamusercontent.com/ugc/1014939826507873789/D56CA38C1A69611F7D0A8F474576BE3915BE82E2/', scale = {0.15, 0.15, 0.15} }
    -- },
    -- ['9999999999999999999'] = {
    --     ['Intro'] = "You are being joined by %s, the TTS Carcassonne Tournament champion. All hail the king!",
    --     ['BaseFollower'] = { type = 'Custom_model', mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507877432/794EE3953A64CCB32CC9538A30B30612FC3C4F2F/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/', scale = {0.5, 0.5, 0.5} },
    -- }
}

--figures that can be generated in code
--[<setting name>] = {[<expansion bag>] = {[<item name>] = {width = <width of object>}}}
neutralFigureSettings = {
    ['PnDFairy'] = {
        name = 'Fairy',
        width = 1.0,
        use_snap_points = false,
        color = {r = 162/255, g = 1, b = 1, a = 1},
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type=1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507606030/3F75A6F3BEA8A6D9A91BBDF16C0882B15110C28E/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/'}
    },
    ['PnDDragon'] = {
        name = 'Dragon',
        width = 2.0,
        use_snap_points = false,
        color = {r = 142/255, g = 0, b = 0, a = 1},
        object_params = {type = 'Custom_model', scale = {0.5, 0.5, 0.5}},
        custom_object_params = {type=1, material = 1, specular_intensity = 0.05, mesh = 'http://cloud-3.steamusercontent.com/ugc/1014939826507607867/825A1C22BA586A45EEDBB7D8EECAD1EA79BFFA6A/', diffuse = 'http://cloud-3.steamusercontent.com/ugc/1014939826507578447/525851AB9D9905C66770E742F1F7280B44A44BC5/', collider = 'http://cloud-3.steamusercontent.com/ugc/1014939826507610133/42E8E30834CAD76F57AFE8F8CD30A4C2C4B28740/'}
    },
    ['FlierFlier'] = {
        width = 1.0,
        use_snap_points = false,
        object_params = {type = 'Custom_Dice', scale = {1.0, 1.0, 1.0}},
        custom_object_params = {type=1, image = 'http://cloud-3.steamusercontent.com/ugc/1009311636238680991/7292CDD3CA4B7E2FB4F75B5BE315CC5A6EC7092C/'},
        custom_script =
[[m_sLastPlayer = nil
loaded = false
dieColliding = false
diePickedUp = false

function onLoad()
    loaded = true
end

function onCollisionEnter(collision_info)
    dieColliding = true
end

function onCollisionExit(collision_info)
    dieColliding = false
end

function onUpdate()
    if diePickedUp and dieColliding and loaded and self.resting and m_sLastPlayer ~= nil then
        dieColliding = false
        diePickedUp = false
        Global.call('onFlierDiceRolled', {sPlayer = m_sLastPlayer})
    end
end

function onPickedUp(player_color)
    diePickedUp = true
    m_sLastPlayer = player_color     --Remember last player who picked up the die
end

function getLastPlayerColor()
    return m_sLastPlayer
end]]
    }
}

--items that are difficult to generate in code, which should be pulled from bags instead
--[<setting name>] = {[<expansion bag>] = {[<item name>] = {width = <width of object>}}}
neutralContainerSettings = {
    ['TnBTradeGoods'] = {['TnB'] = {
        ['TnBClothTokenStack'] = {name = 'Cloth Token', width = 1.0},
        ['TnBWineTokenStack'] = {name = 'Wine Token', width = 1.0},
        ['TnBWheatTokenStack'] = {name = 'Wheat Token', width = 1.0}
    }},
    ['KnRBKing'] = {['KnRB'] = {['KnRBKing'] = {name = 'King', width = 2.0}}},
    ['KnRBRobber'] = {['KnRB'] = {['KnRBRobber'] = {name = 'Robber Baron', width = 2.0}}},
    ['HnSShepherd'] = {['HnS'] = {['HnSSheepBag'] = {name = 'Sheep tokens', width = 1.5}}},
    ['GoldminesGold'] = {['Goldmines'] = {['GoldminesGold'] = {name = 'Gold bars', width = 1.5}}},
    ['FerriesFerries'] = {['Ferries'] = {['FerriesFerries'] = {name = 'Ferries', width = 1.5}}}
}

--setup the game
--4 independent coroutines will be started that each setup a different aspect of the game
--setup will finish when all 4 of these have completed
function startGame()
    clearCounters()
    local hasPlayer = false
    for _, player_color in ipairs(PLAYER_COLORS) do
        if Player[player_color].seated or controlPanelSettings[player_color .. 'Control'] ~= nil then
            hasPlayer = true
        end
    end
    if not hasPlayer then return 1 end
    for _, player_color in ipairs(PLAYER_COLORS) do
        --HACK: The below won't work because TTS has a bug where it won't save the variable correctly in onSave(). Omitting the numbered indexes seems to work around this
        --player_color_tints[player_color] = stringColorToRGB(player_color)
        player_color_tints[player_color] = {}
        player_color_tints[player_color]['r'] = stringColorToRGB(player_color)['r']
        player_color_tints[player_color]['g'] = stringColorToRGB(player_color)['g']
        player_color_tints[player_color]['b'] = stringColorToRGB(player_color)['b']
        if Player[player_color].seated or controlPanelSettings[player_color .. 'Control'] ~= nil then
            local playerPossessionArea = player_possession_areas[player_color]
            local scripting_zone_params = {}
            scripting_zone_params.rotation = {0.1,180,0.1}
            scripting_zone_params.callback = "spawnStartingItemUnlock"  -- all the callback does is set spawnStartingItemLock to false
            scripting_zone_params.callback_owner = Global
            scripting_zone_params.type = "ScriptingTrigger"
            scripting_zone_params.position = {playerPossessionArea.x, TABLE_SURFACE_Y - 0.5 + PLAYER_POSSESSION_ZONE_HEIGHT / 2, playerPossessionArea.z}
            local x_scale, z_scale
            if playerPossessionArea.rotation % 2 == 0 then
                x_scale = PLAYER_POSSESSION_ZONE_WIDTH
                z_scale = PLAYER_POSSESSION_ZONE_DEPTH
            else
                x_scale = PLAYER_POSSESSION_ZONE_DEPTH
                z_scale = PLAYER_POSSESSION_ZONE_WIDTH
            end
            spawnStartingItemLock = true
            local zoneObj = spawnObject(scripting_zone_params)
            while spawnStartingItemLock do
                coroutine.yield(0)
            end
            zoneObj.setName(player_color .. " possession zone")
            zoneObj.setScale({x_scale, PLAYER_POSSESSION_ZONE_HEIGHT, z_scale})
            local newColor = player_color
            coroutine.yield(0)
            playerPossessionScriptingZones[player_color] = zoneObj.getGUID()
            local objs = zoneObj.getObjects()
            for _, obj in pairs(objs) do
                if obj.getName() == 'Follower' then
                    newColor = obj.getDescription()
                    --HACK: The below won't work because TTS has a bug where it won't save the variable correctly in onSave(). Omitting the numbered indexes seems to work around this
                    --player_color_tints[newColor] = obj.getColorTint()
                    player_color_tints[newColor] = {}
                    player_color_tints[newColor]['r'] = obj.getColorTint()['r']
                    player_color_tints[newColor]['g'] = obj.getColorTint()['g']
                    player_color_tints[newColor]['b'] = obj.getColorTint()['b']
                    allGameMessage({"MESSAGE_SETUP_COLOR_SUBSTITUTION", {'{c1}', translate(player_color)}, {'{c2}', RGBToBracketedHex(player_color_tints[newColor]) .. translate(newColor)}}, player_color_tints[player_color])
                    break
                end
            end
            substituteFigureSettings[newColor] = {}
            for _, obj in pairs(objs) do
                local customObject = obj.getCustomObject()
                if customObject.mesh ~= nil then
                    local figureSettingName = nil
                    if obj.getName() == 'Follower' then figureSettingName = 'BaseFollower' end
                    -- it is possible to put additional figure types here, but I decided not to since it would make the game too confusing
                    if figureSettingName ~= nil and customObject.mesh ~= playerFigureSettings[figureSettingName].custom_object_params.mesh then
                        substituteFigureSettings[newColor][figureSettingName] = {}
                        substituteFigureSettings[newColor][figureSettingName].object_params = {type = 'Custom_model'}
                        substituteFigureSettings[newColor][figureSettingName].object_params.scale = obj.getScale()
                        substituteFigureSettings[newColor][figureSettingName].custom_object_params = customObject
                        substituteFigureSettings[newColor][figureSettingName].custom_object_params.collider = playerFigureSettings[figureSettingName].custom_object_params.mesh
                        allGameMessage({"MESSAGE_SETUP_MODEL_SUBSTITUTION", {'{c1}', translate(newColor)}, {'{f1}', translate(obj.getName())}}, player_color_tints[player_color])
                    end
                end
            end
            --re-use the same model for the Big Follower
            if substituteFigureSettings[newColor]['BaseFollower'] ~= nil then
                substituteFigureSettings[newColor]['InCBigFollower'] = {}
                substituteFigureSettings[newColor]['InCBigFollower'].object_params = {type = 'Custom_model'}
                substituteFigureSettings[newColor]['InCBigFollower'].object_params.scale = {}
                for key, value in pairs(substituteFigureSettings[newColor]['BaseFollower'].object_params.scale) do
                    substituteFigureSettings[newColor]['InCBigFollower'].object_params.scale[key] = value * 1.2
                end
                substituteFigureSettings[newColor]['InCBigFollower'].custom_object_params = table.shallow_copy(substituteFigureSettings[newColor]['BaseFollower'].custom_object_params)
                substituteFigureSettings[newColor]['InCBigFollower'].custom_object_params.collider = playerFigureSettings['BaseFollower'].custom_object_params.mesh
            end
            if newColor ~= player_color then
                controllingPlayer = player_color
                if controlPanelSettings[controllingPlayer .. 'Control'] ~= nil then
                    controllingPlayer = controlPanelSettings[controllingPlayer .. 'Control']
                end
                controlPanelSettings[newColor .. 'Control'] = controllingPlayer
                score_counter_guids[newColor] = score_counter_guids[player_color]
                getObjectFromGUID(score_counter_guids[newColor]).setColorTint(player_color_tints[newColor])
                figurepad_GUIDs[newColor] = figurepad_GUIDs[player_color]
                player_possession_areas[newColor] = player_possession_areas[player_color]
                playerPossessionScriptingZones[newColor] = playerPossessionScriptingZones[player_color]
                handColor[newColor] = handColor[player_color]
            end
            table.insert(activePlayers, newColor)
            if Player[player_color].seated and vipFigureSettings[Player[player_color].steam_id] ~= nil and vipFigureSettings[Player[player_color].steam_id]['Intro'] ~= nil then
                allGameMessage(string.format(vipFigureSettings[Player[player_color].steam_id]['Intro'], Player[player_color].steam_name), NEUTRAL_COLOR)
            end
        else
            getObjectFromGUID(figurepad_GUIDs[player_color]).destruct()
            figurepad_GUIDs[player_color] = nil
        end
    end
    for _, obj in ipairs(getAllObjects()) do
        if obj.getName() == 'Follower' or obj.getName() == 'Substitute Colors and Meeples' then
            obj.destruct()
        end
    end
    currentPlayer = math.random(#activePlayers)
    prepareTileStackFinished = false
    preparePlayerStartingItemsFinished = false
    prepareNeutralItemsFinished = false
    prepareStartingTilesFinished = false
    initializeScoreSummary()
    if not controlPanelSettings['StartingTileBase'] then
        --since the base starting tile is already on the table, remove if disabled
        local baseStartingTile = getObjectFromGUID(BASE_STARTING_TILE_GUID)
        if baseStartingTile ~= nil then
            baseStartingTile.destruct()
            tileInPlay = nil
        end
    end
    if not controlPanelSettings['BaseTiles'] then
        --since the base tile stack is already on the table, remove if disabled
        local baseTileStack = getObjectFromGUID(BASE_TILE_STACK_GUID)
        if baseTileStack ~= nil then
            baseTileStack.destruct()
            tileStack_GUID = nil
        end
    end
    startLuaCoroutine(self, 'prepareTileStack')
    startLuaCoroutine(self, 'prepareStartingTiles')
    startLuaCoroutine(self, 'preparePlayerStartingItems')
    startLuaCoroutine(self, 'prepareNeutralItems')

    while not prepareTileStackFinished or not preparePlayerStartingItemsFinished or not prepareNeutralItemsFinished or not prepareStartingTilesFinished do
        coroutine.yield(0)
    end
    wait(1.0) --I don't remember what this wait is for but I recall a problem if you don't use it
    --delete all unused expansions in order to improve save/load times
    for _, obj in ipairs(getObjectFromGUID(EXPANSION_BAG_AREA_SCRIPTING_ZONE_GUID).getObjects()) do
        if obj.getGUID() == EXPANSION_TABLE_GUID then
            obj.setPosition({x=obj.getPosition().x, y=obj.getPosition().y + 0.2, z=obj.getPosition().z - 0.7})
        else
            obj.destruct()
        end
    end
    --initialize tilesRemaining
    local tileStack = getObjectFromGUID(tileStack_GUID)
    tilesRemaining = 0
    if getObjectFromGUID(tileStack_GUID) ~= nil then
        tilesRemaining = getObjectFromGUID(tileStack_GUID).getQuantity()
    elseif finalTile_GUID ~= nil then
        tilesRemaining = 1
    end
    --initialize buriedTile information if playing with relevant expansion
    if controlPanelSettings['HnSHills'] then
        buriedTiles = {}
        buriedTileCount = 0
    end
    if controlPanelSettings['StartingTileBase'] then
        addTile(MIDDLE_X_OFFSET, MIDDLE_Z_OFFSET, getObjectFromGUID(BASE_STARTING_TILE_GUID), 2, false)
    end
    --shuffle and lock starting tiles
    for rule_id, rule in pairs(startingTileSettings) do
        if controlPanelSettings[rule_id] then
            for expansion_id, expansion in pairs(rule) do
                for item_id, item_settings in pairs(expansion) do
                    local stackObject = getObjectFromGUID(EXPANSION_BAGS[expansion_id].contents[item_id].guid)
                    if stackObject ~= nil then
                        if item_settings.shuffle then stackObject.shuffle() end
                        if item_settings.lock then stackObject.setLock(true) end
                    end
                    if item_settings.contents ~= nil then
                        for sub_item_id, sub_item_settings in pairs(item_settings.contents) do
                            local sub_tile = getObjectFromGUID(EXPANSION_BAGS[expansion_id].contents[item_id].contents[sub_item_id].guid)
                            if sub_tile ~= nil then
                                if sub_item_settings.lock then sub_tile.setLock(true) end
                                if sub_item_settings.addToGrid then
                                    local xIndex = math.floor((sub_item_settings.position.x + MIDDLE_OFFSET.x + TILE_SPACING / 2) / TILE_SPACING)
                                    local zIndex = math.floor((sub_item_settings.position.z + MIDDLE_OFFSET.z + TILE_SPACING / 2) / TILE_SPACING)
                                    local tileRotation = math.floor(sub_item_settings.rotation.y / 90 + 0.5)
                                    if tileRotation == 0 then tileRotation = 4 end
                                    addTile(xIndex, zIndex, getObjectFromGUID(EXPANSION_BAGS[expansion_id].contents[item_id].contents[sub_item_id].guid), tileRotation, false)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    --HACK: in cases where the game is setup automatically, the starting tile should not be highlighted
    lastPlacedPlayerTiles[activePlayers[currentPlayer]] = nil
    tileStack.shuffle()
    if controlPanelSettings['StartingTileRiverII'] then
        allGameMessage({"MESSAGE_SETUP_RIVER_II_NOTIFICATION"}, NEUTRAL_COLOR)
        -- tileStack.setLock(true)
        -- tileStack.interactable = false
    elseif controlPanelSettings['StartingTileRiver'] or controlPanelSettings['StartingTileRiverBB5'] then
        allGameMessage({"MESSAGE_SETUP_RIVER_NOTIFICATION"}, NEUTRAL_COLOR)
        -- tileStack.setLock(true)
        -- tileStack.interactable = false
    end
    allGameMessage({"MESSAGE_SETUP_START"}, NEUTRAL_COLOR)
    allGameMessage({"MESSAGE_SETUP_FIRST_PLAYER", {'{p1}', getPlayerOwnerName(activePlayers[currentPlayer])}}, player_color_tints[activePlayers[currentPlayer]], activePlayers[currentPlayer])

    turnState = 'begin turn'
    stateHandler()
    return 1
end

--sets up player starting possessions
function preparePlayerStartingItems()
    if controlPanelSettings['AnMAbbey'] then
        spawnStartingItemLock = true
        if takeObjectSafe(getObjectFromGUID(EXPANSION_BAGS['AnM'].guid), {guid = EXPANSION_BAGS['AnM'].contents['AnMAbbey'].guid, position = {x = 0.0, y = 3.0, z = -10.0}, rotation = {0,180,0}, smooth = false, callback_owner = Global, callback = "spawnStartingItemUnlock"}) == nil then
            spawnStartingItemLock = false
        end
        while spawnStartingItemLock do
            coroutine.yield(0)
        end
        wait(0.1) --need to wait before taking objects from this stack. Wait time is arbitrary, but seems to work.
    end
    for _, player in ipairs(activePlayers) do
        local figurePad = getObjectFromGUID(figurepad_GUIDs[player])
        if controlPanelSettings['AnMAbbey'] then
            local take_object_params = {}
            local x, z = rotateCoordinatesDegrees(-7.15, 0.0, -figurePad.getRotation().y)
            take_object_params.position = {figurePad.getPosition().x + x, 2, figurePad.getPosition().z + z}
            take_object_params.rotation = {0, figurePad.getRotation().y, 0}
            take_object_params.callback_owner = Global
            take_object_params.callback = "spawnStartingItemUnlock"
            getObjectFromGUID(EXPANSION_BAGS['AnM'].contents['AnMAbbey'].guid).takeObject(take_object_params)
        end
        figurePositions[player] = {}

        for figure, figureSetting in pairs(playerFigureSettings) do
            local figureSettingCopy = table.shallow_copy(figureSetting)
            if controlPanelSettings[figure] then
                if getPlayerOwner(player) == player and Player[player].seated and vipFigureSettings[Player[player].steam_id] ~= nil and vipFigureSettings[Player[player].steam_id][figure] ~= nil then
                    figureSettingCopy.custom_object_params = vipFigureSettings[Player[player].steam_id][figure]
                end
                if substituteFigureSettings[player][figure] ~= nil then
                    figureSettingCopy.custom_object_params = substituteFigureSettings[player][figure].custom_object_params
                    figureSettingCopy.object_params = substituteFigureSettings[player][figure].object_params
                end
                local num
                if figureSettingCopy.num ~= nil then num = controlPanelSettings[figureSettingCopy.num] else num = 1 end
                for i=1, num do
                    local x, z
                    local y = 0
                    if figure == 'TowerTowers' then
                        x, z = rotateCoordinatesDegrees(figureSetting.figurepad_offset.x, figureSetting.figurepad_offset.z, -figurePad.getRotation().y)
                        y = -1 + (i - 1) * 0.5
                    else
                        x, z = rotateCoordinatesDegrees(figureSetting.figurepad_offset.x + (((i - 1) % 4) * -1.45), figureSetting.figurepad_offset.z + (math.floor((i - 1) / 4) * 1.0), -figurePad.getRotation().y)
                    end
                    local object_params = table.shallow_copy(figureSettingCopy.object_params)
                    object_params.position = {figurePad.getPosition().x + x, 2 + y, figurePad.getPosition().z + z}
                    object_params.rotation = {0, figurePad.getRotation().y, 0}
                    object_params.callback_owner = Global
                    object_params.callback = "spawnStartingItemUnlock"
                    spawnStartingItemLock = true
                    local obj = spawnObject(object_params)

                    local custom_object_params = table.shallow_copy(figureSettingCopy.custom_object_params)
                    obj.setCustomObject(custom_object_params)
                    obj.setName(translate(figureSettingCopy.name))
                    if not figureSettingCopy.hide_owner then
                        obj.setDescription(translate(player))
                    end
                    if figureSettingCopy.color ~= nil then
                        obj.setColorTint(figureSettingCopy.color)
                    else
                        obj.setColorTint(player_color_tints[player])
                    end
                    obj.setLuaScript("figureName = '" .. figureSettingCopy.name .. "'\n" .. "owner = '" .. player .. "'")
                    obj.use_grid = false
                    obj.use_snap_points = figureSettingCopy.use_snap_points
                    while spawnStartingItemLock do
                        coroutine.yield(0)
                    end
                    if figureSettingCopy.save_figurepad_location then
                        figurePositions[player][obj.getGUID()] = {x=figureSettingCopy.figurepad_offset.x + (((i - 1) % 4) * -1.45), z=figureSettingCopy.figurepad_offset.z + (math.floor((i - 1) / 4) * 1.0)}
                    end
                end
            end
        end
    end
    if controlPanelSettings['AnMAbbey'] then
        getObjectFromGUID(EXPANSION_BAGS['AnM'].guid).putObject(getObjectFromGUID(EXPANSION_BAGS['AnM'].contents['AnMAbbey'].guid))
    end
    wait(2)
    preparePlayerStartingItemsFinished = true
    return 1
end

--Will allow the startGame and preparePlayerStartingItems coroutines to continue running
--(both functions are not run at the same time so I re-use the lock)
function spawnStartingItemUnlock()
    spawnStartingItemLock = false
end

--pulls tiles from expansion bags into the main tile stack
function prepareTileStack()
    local tileStack = nil
    local tileStackAddPosition
    if tileStack_GUID == nil then
        tileStackAddPosition = defaultTileStackPosition
    else
        tileStack = getObjectFromGUID(tileStack_GUID)
        tileStackAddPosition = tileStack.getPosition()
    end
    local stackY = tileStackAddPosition.y
    for rule_id, rule in pairs(tileSettings) do
        if controlPanelSettings[rule_id] then
            for expansion_id, expansion in pairs(rule) do
                for item_id, item_settings in pairs(expansion) do
                    if tileStack ~= nil then
                        tileStackAddPosition.y = stackY + 1 + tileStack.getQuantity() * STACKED_TILE_THICKNESS
                    end
                    local params = {guid = EXPANSION_BAGS[expansion_id].contents[item_id].guid,
                                    position = tileStackAddPosition,
                                    rotation = {0,180,180}}
                    if tileStack_GUID == nil then
                        prepareTileStackLock = true
                        params.callback_owner = Global
                        params.callback = "prepareTileStackUnlock"
                    end
                    local newStack = takeObjectSafe(getObjectFromGUID(EXPANSION_BAGS[expansion_id].guid), params)
                    if newStack ~= nil then
                        if tileStack_GUID == nil then
                            while prepareTileStackLock do
                                coroutine.yield(0)
                            end
                            if newStack.getQuantity() > 1 then --HACK: this technically wouldn't work if the first two were only one tile, but for the time being it works
                                tileStack_GUID = EXPANSION_BAGS[expansion_id].contents[item_id].guid
                                tileStack = newStack
                            end
                        else
                            tileStack.putObject(newStack)
                        end
                    end
                    coroutine.yield(0)
                end
            end
        end
    end
    prepareTileStackFinished = true
    return 1
end

--unlocks the prepareTileStack coroutine
function prepareTileStackUnlock()
    prepareTileStackLock = false
end

--setup the starting tiles of the game
function prepareStartingTiles()
    local springExpansion
    local springPriority = 999
    local lakeExpansion
    local lakePriority = 999
    for rule_id, rule in pairs(startingTileSettings) do
        if controlPanelSettings[rule_id] then
            for expansion_id, expansion in pairs(rule) do
                for item_id, item_settings in pairs(expansion) do
                    if (item_id == "RiverSpringTile" and item_settings.priority < springPriority) then
                        springExpansion = expansion_id
                        springPriority = item_settings.priority
                    end
                    if (item_id == "RiverLakeTile" and item_settings.priority < lakePriority) then
                        lakeExpansion = expansion_id
                        lakePriority = item_settings.priority
                    end
                end
            end
        end
    end
    for rule_id, rule in pairs(startingTileSettings) do
        if controlPanelSettings[rule_id] then
            for expansion_id, expansion in pairs(rule) do
                for item_id, item_settings in pairs(expansion) do
                    --HACK: only use the count if it isn't disabled
                    if item_id ~= 'CoCCount' or not controlPanelSettings['CoCNoCount'] then
                        if (item_id ~= "RiverSpringTile" or springExpansion == expansion_id) and (item_id ~= "RiverLakeTile" or lakeExpansion == expansion_id) then
                            --HACK: only use GamesQuarterly river tiles if one of the rivers is enabled
                            if not (rule_id == 'GamesQuarterlyTiles' and (item_id == "RiverSpringTile" or item_id == "RiverBodyTiles") and not controlPanelSettings['StartingTileRiverII'] and not controlPanelSettings['StartingTileRiver'] and not controlPanelSettings['StartingTileRiverBB5']) then
                                if item_id == 'WoFPig' and not pigIsEnabled() then break end
                                prepareStartingTileLock = true
                                local position = item_settings.position
                                local rotation = item_settings.rotation
                                if controlPanelSettings['RiverMixAll'] and (item_id == 'RiverForkTile' or item_id == 'RiverSpringTile' or item_id == 'RiverBodyTiles' or item_id == 'RiverLakeTile') then
                                    position = defaultRiverLocation.position
                                    rotation = defaultRiverLocation.rotation
                                end
                                if controlPanelSettings['StartingTileWoF'] and controlPanelSettings['StartingTileCoC'] then
                                    if item_id == 'CoCCount' then
                                        position.z = position.z + (1.59 * 2) --move to make room for the WoF
                                    elseif item_id == 'WoFWheel' or item_id == 'WoFPig' then
                                        position.z = position.z - 1.59 --move to make room for the CoC
                                    end
                                end
                                if takeObjectSafe(getObjectFromGUID(EXPANSION_BAGS[expansion_id].guid), {guid = EXPANSION_BAGS[expansion_id].contents[item_id].guid, position = position, rotation = rotation, smooth = false, callback_owner = Global, callback = "prepareStartingTileUnlock"}) == nil then
                                    prepareStartingTileLock = false
                                end
                                while prepareStartingTileLock do
                                    coroutine.yield(0)
                                end
                                wait(0.1) --need to wait before taking objects from this stack. Wait time is arbitrary, but seems to work.
                                if controlPanelSettings['RiverMixAll'] and item_id ~= 'CoCStartingTiles' then
                                    if riverBodyTiles_GUID == nil and getObjectFromGUID(EXPANSION_BAGS[expansion_id].contents[item_id].guid).getQuantity() > 1  then --HACK: this technically wouldn't work if the first two were only one tile, but for the time being it works
                                        riverBodyTiles_GUID = EXPANSION_BAGS[expansion_id].contents[item_id].guid
                                    end
                                else
                                    if item_id == "RiverForkTile" and forkTile_GUID == nil then
                                        forkTile_GUID = EXPANSION_BAGS[expansion_id].contents[item_id].guid
                                    end
                                    if item_id == "RiverSpringTile" then
                                        springTile_GUID = EXPANSION_BAGS[expansion_id].contents[item_id].guid
                                    end
                                    if item_id == "RiverLakeTile" then
                                        lakeTile_GUID = EXPANSION_BAGS[expansion_id].contents[item_id].guid
                                    end
                                    if item_id == "RiverBodyTiles" and rule_id ~= 'GamesQuarterlyTiles' and riverBodyTiles_GUID == nil then --HACK: gamesquarterly has a single body tile, so it won't be used as the bodyTileStack
                                        riverBodyTiles_GUID = EXPANSION_BAGS[expansion_id].contents[item_id].guid
                                    end
                                end
                            end
                        end
                        if item_settings.contents ~= nil then
                            for sub_item_id, sub_item_settings in pairs(item_settings.contents) do
                                local position = sub_item_settings.position
                                if controlPanelSettings['StartingTileWoF'] and controlPanelSettings['StartingTileCoC'] then
                                    if item_id == 'CoCStartingTiles' then
                                        position.z = position.z + (1.59 * 2) --move to make room for the WoF
                                    elseif item_id == 'WoFStartingTiles' then
                                        position.z = position.z - 1.59 --move to make room for the CoC
                                    end
                                end
                                if getObjectFromGUID(EXPANSION_BAGS[expansion_id].contents[item_id].guid) ~= nil then
                                    local params = {guid = EXPANSION_BAGS[expansion_id].contents[item_id].contents[sub_item_id].guid,
                                                    position = position,
                                                    rotation = sub_item_settings.rotation}
                                    if sub_item_id == #item_settings.contents - 1 then
                                        prepareStartingTileLock = true
                                        params.callback_owner = Global
                                        params.callback = "prepareStartingTileUnlock"
                                    end
                                    -- if item_id == 'WoFStartingTiles' then
                                    --     params.params = {position = position, rotation = sub_item_settings.rotation}
                                    --     params.callback = "prepareWoFStartingTile"
                                    -- end
                                    getObjectFromGUID(EXPANSION_BAGS[expansion_id].contents[item_id].guid).takeObject(params)
                                else
                                    local newObj = getObjectFromGUID(EXPANSION_BAGS[expansion_id].contents[item_id].contents[sub_item_id].guid)
                                    newObj.setPositionSmooth(position)
                                    newObj.setRotationSmooth(sub_item_settings.rotation)
                                    prepareStartingTileLock = false
                                    wait(1.5)
                                end
                                if sub_item_id == #item_settings.contents - 1 then
                                    while prepareStartingTileLock do
                                       coroutine.yield(0)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    --HACK: if there is no fork, assign the spring to fork so that it is placed first
    if forkTile_GUID == nil and springTile_GUID ~= nil then
        forkTile_GUID = springTile_GUID
        springTile_GUID = nil
    end
    prepareStartingTilesFinished = true
    return 1
end

--unlocks the preparePlayerStartingItems coroutine
function prepareStartingTileUnlock()
    prepareStartingTileLock = false
end

--unlocks the preparePlayerStartingItems coroutine
function prepareWoFStartingTile(newObj, params)
    newObj.setPosition(params.position)
    newObj.setRotation(params.rotation)
    newObj.setLock(true)
    prepareStartingTileLock = false
end

--sets up items that do not belong to any specific player in the neutral area
function prepareNeutralItems()
    local offset = 0
    for rule_id, figureSetting in pairs(neutralFigureSettings) do
        local figureSettingCopy = table.shallow_copy(figureSetting)
        if controlPanelSettings[rule_id] then
            local num
            if figureSettingCopy.num ~= nil then num = controlPanelSettings[figureSettingCopy.num] else num = 1 end
            for i=1, num do
                offset = offset + figureSetting.width / 2
                local object_params = table.shallow_copy(figureSettingCopy.object_params)
                object_params.position = {x = NEUTRAL_ITEMS_LOCATION.x + offset, y = NEUTRAL_ITEMS_LOCATION.y, z = NEUTRAL_ITEMS_LOCATION.z}
                object_params.rotation = {0,180,0}
                object_params.callback_owner = Global
                object_params.callback = "neutralItemsUnlock"
                neutralItemsLock = true
                local obj = spawnObject(object_params)

                local custom_object_params = table.shallow_copy(figureSettingCopy.custom_object_params)
                obj.setCustomObject(custom_object_params)
                obj.setName(translate(figureSettingCopy.name))
                if figureSettingCopy.color ~= nil then
                    obj.setColorTint(figureSettingCopy.color)
                end
                if figureSettingCopy.name ~= nil then
                    obj.setLuaScript("figureName = '" .. figureSettingCopy.name .. "'")
                end
                if figureSettingCopy.custom_script ~= nil then
                    obj.setLuaScript(figureSettingCopy.custom_script)
                end
                obj.use_grid = false
                obj.use_snap_points = figureSettingCopy.use_snap_points
                offset = offset + figureSetting.width / 2
                while neutralItemsLock do
                   coroutine.yield(0)
                end
                if rule_id == 'PnDFairy' then
                    fairy_GUID = obj.getGUID()
                elseif rule_id == 'PnDDragon' then
                    dragon_GUID = obj.getGUID()
                elseif rule_id == 'FlierFlier' then
                    flierDie_GUID = obj.getGUID()
                end
            end
        end
    end
    for rule_id, rule in pairs(neutralContainerSettings) do
        if controlPanelSettings[rule_id] then
            for expansion_id, expansion in pairs(rule) do
                for item_id, item_settings in pairs(expansion) do
                    neutralItemsLock = true
                    offset = offset + item_settings.width / 2
                    local takenObject = takeObjectSafe(getObjectFromGUID(EXPANSION_BAGS[expansion_id].guid), {guid = EXPANSION_BAGS[expansion_id].contents[item_id].guid, position = {x = NEUTRAL_ITEMS_LOCATION.x + offset, y = NEUTRAL_ITEMS_LOCATION.y, z = NEUTRAL_ITEMS_LOCATION.z}, rotation = {0,180,0}, callback_owner = Global, callback = "neutralItemsUnlock"})
                    if takenObject == nil then
                        --immediately unlock since the callback will never happen
                        neutralItemsLock = false
                    end
                    offset = offset + item_settings.width / 2
                    while neutralItemsLock do
                       coroutine.yield(0)
                    end
                    takenObject.setName(item_settings.name)
                end
            end
        end
    end
    prepareNeutralItemsFinished = true
    return 1
end

--unlocks the prepareNeutralItems coroutine
function neutralItemsUnlock()
    neutralItemsLock = false
end
